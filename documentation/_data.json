{
  "section": "Developer Documentation",
  "section_order": 4,
  "layout": "docs.njk",
  "tags": "documentation",
  "api": [
    {
      "namespace": "components",
      "description": "shared notion-style elements",
      "exports": [
        {
          "name": "addTooltip",
          "type": "function",
          "doc": "add a tooltip to show extra information on hover",
          "tags": [
            {
              "kind": "param",
              "name": "$ref",
              "type": "HTMLElement",
              "doc": "- the element that will trigger the tooltip when hovered"
            },
            {
              "kind": "param",
              "name": "$content",
              "type": "string|HTMLElement",
              "doc": "- markdown or element content of the tooltip"
            },
            {
              "kind": "param",
              "name": "options",
              "type": "object",
              "doc": "- configuration of how the tooltip should be displayed",
              "optional": true
            },
            {
              "kind": "param",
              "name": "options.delay",
              "type": "number",
              "doc": "- the amount of time in ms the element needs to be hovered over\nfor the tooltip to be shown (default: 100)",
              "optional": true
            },
            {
              "kind": "param",
              "name": "options.offsetDirection",
              "type": "string",
              "doc": "- which side of the element the tooltip\nshould be shown on: 'top', 'bottom', 'left' or 'right' (default: 'bottom')",
              "optional": true
            },
            {
              "kind": "param",
              "name": "options.maxLines",
              "type": "number",
              "doc": "- the max number of lines that the content may be wrapped\nto, used to position and size the tooltip correctly (default: 1)",
              "optional": true
            }
          ]
        },
        {
          "name": "feather",
          "type": "function",
          "doc": "generate an icon from the feather icons set",
          "tags": [
            {
              "kind": "param",
              "name": "name",
              "type": "string",
              "doc": "- the name/id of the icon"
            },
            {
              "kind": "param",
              "name": "attrs",
              "type": "object",
              "doc": "- an object of attributes to apply to the icon e.g. classes"
            },
            {
              "kind": "return",
              "type": "string",
              "doc": "an svg string"
            }
          ]
        },
        {
          "name": "addCornerAction",
          "type": "function",
          "doc": "adds a button to notion's bottom right corner",
          "tags": [
            {
              "kind": "param",
              "name": "icon",
              "type": "string",
              "doc": "- an svg string"
            },
            {
              "kind": "param",
              "name": "listener",
              "type": "function",
              "doc": "- the function to call when the button is clicked"
            },
            {
              "kind": "return",
              "type": "Element",
              "doc": "the appended corner action element"
            }
          ]
        },
        {
          "name": "addPanelView",
          "type": "function",
          "doc": "adds a view to the enhancer's side panel",
          "tags": [
            {
              "kind": "param",
              "name": "panel",
              "type": "object",
              "doc": "- information used to construct and render the panel"
            },
            {
              "kind": "param",
              "name": "panel.id",
              "type": "string",
              "doc": "- a uuid, used to restore the last open view on reload"
            },
            {
              "kind": "param",
              "name": "panel.icon",
              "type": "string",
              "doc": "- an svg string"
            },
            {
              "kind": "param",
              "name": "panel.title",
              "type": "string",
              "doc": "- the name of the view"
            },
            {
              "kind": "param",
              "name": "panel.$content",
              "type": "Element",
              "doc": "- an element containing the content of the view"
            },
            {
              "kind": "param",
              "name": "panel.onBlur",
              "type": "function",
              "doc": "- runs when the view is selected/focused"
            },
            {
              "kind": "param",
              "name": "panel.onFocus",
              "type": "function",
              "doc": "- runs when the view is unfocused/closed"
            }
          ]
        }
      ]
    },
    {
      "namespace": "electron",
      "description": "access to electron renderer apis",
      "exports": [
        {
          "name": "browser",
          "type": "BrowserWindow",
          "doc": "access to the electron BrowserWindow instance for the current window\nsee https://www.electronjs.org/docs/latest/api/browser-window",
          "tags": [
            {
              "kind": "runtime",
              "doc": "electron (renderer process)"
            }
          ]
        },
        {
          "name": "webFrame",
          "type": "webFrame",
          "doc": "access to the electron webFrame instance for the current page\nsee https://www.electronjs.org/docs/latest/api/web-frame",
          "tags": [
            {
              "kind": "runtime",
              "doc": "electron (renderer process)"
            }
          ]
        },
        {
          "name": "sendMessage",
          "type": "function",
          "doc": "send a message to the main electron process",
          "tags": [
            {
              "kind": "param",
              "name": "channel",
              "type": "string",
              "doc": "- the message identifier"
            },
            {
              "kind": "param",
              "name": "data",
              "type": "any",
              "doc": "- the data to pass along with the message"
            },
            {
              "kind": "param",
              "name": "namespace",
              "type": "string",
              "doc": "- a prefix for the message to categorise\nit as e.g. enhancer-related. this should not be changed unless replicating\nbuiltin ipc events.",
              "optional": true
            },
            {
              "kind": "runtime",
              "doc": "electron (renderer process)"
            }
          ]
        },
        {
          "name": "sendMessageToHost",
          "type": "function",
          "doc": "send a message to the webview's parent renderer process",
          "tags": [
            {
              "kind": "param",
              "name": "channel",
              "type": "string",
              "doc": "- the message identifier"
            },
            {
              "kind": "param",
              "name": "data",
              "type": "any",
              "doc": "- the data to pass along with the message"
            },
            {
              "kind": "param",
              "name": "namespace",
              "type": "string",
              "doc": "- a prefix for the message to categorise\nit as e.g. enhancer-related. this should not be changed unless replicating\nbuiltin ipc events.",
              "optional": true
            },
            {
              "kind": "runtime",
              "doc": "electron (renderer process)"
            }
          ]
        },
        {
          "name": "onMessage",
          "type": "function",
          "doc": "receive a message from either the main process or\nthe webview's parent renderer process",
          "tags": [
            {
              "kind": "param",
              "name": "channel",
              "type": "string",
              "doc": "- the message identifier to listen for"
            },
            {
              "kind": "param",
              "name": "callback",
              "type": "function",
              "doc": "- the message handler, passed the args (event, data)"
            },
            {
              "kind": "param",
              "name": "namespace",
              "type": "string",
              "doc": "- a prefix for the message to categorise\nit as e.g. enhancer-related. this should not be changed unless replicating\nbuiltin ipc events.",
              "optional": true
            },
            {
              "kind": "runtime",
              "doc": "electron (renderer process)"
            }
          ]
        },
        {
          "name": "notionRequire",
          "type": "function",
          "doc": "require() notion app files",
          "tags": [
            {
              "kind": "param",
              "name": "path",
              "type": "string",
              "doc": "- within notion/resources/app/ e.g. main/createWindow.js"
            },
            {
              "kind": "runtime",
              "doc": "electron (main process)"
            }
          ]
        },
        {
          "name": "getNotionWindows",
          "type": "function",
          "doc": "get all available app windows excluding the menu",
          "tags": [
            {
              "kind": "runtime",
              "doc": "electron (main process)"
            }
          ]
        },
        {
          "name": "getFocusedNotionWindow",
          "type": "function",
          "doc": "get the currently focused notion window",
          "tags": [
            {
              "kind": "runtime",
              "doc": "electron (main process)"
            }
          ]
        }
      ]
    },
    {
      "namespace": "env",
      "description": "environment-specific methods and constants",
      "exports": [
        {
          "name": "name",
          "type": "string",
          "doc": "the environment/platform name code is currently being executed in",
          "tags": [
            {
              "kind": "constant",
              "doc": ""
            }
          ]
        },
        {
          "name": "version",
          "type": "string",
          "doc": "the current version of the enhancer",
          "tags": [
            {
              "kind": "constant",
              "doc": ""
            }
          ]
        },
        {
          "name": "focusMenu",
          "type": "function",
          "doc": "open the enhancer's menu",
          "tags": []
        },
        {
          "name": "focusNotion",
          "type": "function",
          "doc": "focus an active notion tab",
          "tags": []
        },
        {
          "name": "reload",
          "type": "function",
          "doc": "reload all notion and enhancer menu tabs to apply changes",
          "tags": []
        }
      ]
    },
    {
      "namespace": "fmt",
      "description": "helpers for formatting or parsing text",
      "exports": [
        {
          "name": "slugger",
          "type": "function",
          "doc": "transform a heading into a slug (a lowercase alphanumeric string separated by hyphens),\ne.g. for use as an anchor id",
          "tags": [
            {
              "kind": "param",
              "name": "heading",
              "type": "string",
              "doc": "- the original heading to be slugified"
            },
            {
              "kind": "param",
              "name": "slugs",
              "type": "Set<string>",
              "doc": "- a list of pre-generated slugs to avoid duplicates",
              "optional": true
            },
            {
              "kind": "return",
              "type": "string",
              "doc": "the generated slug"
            }
          ]
        },
        {
          "name": "uuidv4",
          "type": "function",
          "doc": "generate a reasonably random uuidv4 string. uses crypto implementation if available\n(from https://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid)",
          "tags": [
            {
              "kind": "return",
              "type": "string",
              "doc": "a uuidv4"
            }
          ]
        },
        {
          "name": "rgbLogShade",
          "type": "function",
          "doc": "log-based shading of an rgb color, from\nhttps://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors",
          "tags": [
            {
              "kind": "param",
              "name": "shade",
              "type": "number",
              "doc": "- a decimal amount to shade the color.\n1 = white, 0 = the original color, -1 = black"
            },
            {
              "kind": "param",
              "name": "color",
              "type": "string",
              "doc": "- the rgb color"
            },
            {
              "kind": "return",
              "type": "string",
              "doc": "the shaded color"
            }
          ]
        },
        {
          "name": "rgbContrast",
          "type": "function",
          "doc": "pick a contrasting color e.g. for text on a variable color background\nusing the hsp (perceived brightness) constants from http://alienryderflex.com/hsp.html",
          "tags": [
            {
              "kind": "param",
              "name": "r",
              "type": "number",
              "doc": "- red (0-255)"
            },
            {
              "kind": "param",
              "name": "g",
              "type": "number",
              "doc": "- green (0-255)"
            },
            {
              "kind": "param",
              "name": "b",
              "type": "number",
              "doc": "- blue (0-255)"
            },
            {
              "kind": "return",
              "type": "string",
              "doc": "the contrasting rgb color, white or black"
            }
          ]
        },
        {
          "name": "is",
          "type": "function",
          "doc": "test the type of a value. unifies builtin, regex, and environment/api checks",
          "tags": [
            {
              "kind": "param",
              "name": "value",
              "type": "unknown",
              "doc": "- the value to check"
            },
            {
              "kind": "param",
              "name": "type",
              "type": "string|string[]",
              "doc": "- the type the value should be or a list of allowed values"
            },
            {
              "kind": "return",
              "type": "boolean",
              "doc": "whether or not the value matches the type"
            }
          ]
        }
      ]
    },
    {
      "namespace": "fs",
      "description": "environment-specific file reading",
      "exports": [
        {
          "name": "notionPath",
          "type": "function",
          "doc": "get an absolute path to files within notion",
          "tags": [
            {
              "kind": "param",
              "name": "path",
              "type": "string",
              "doc": "- relative to the root notion/resources/app/ e.g. renderer/search.js"
            },
            {
              "kind": "runtime",
              "doc": "electron"
            }
          ]
        },
        {
          "name": "localPath",
          "type": "function",
          "doc": "transform a path relative to the enhancer root directory into an absolute path",
          "tags": [
            {
              "kind": "param",
              "name": "path",
              "type": "string",
              "doc": "- a url or within-the-enhancer filepath"
            },
            {
              "kind": "return",
              "type": "string",
              "doc": "an absolute filepath"
            }
          ]
        },
        {
          "name": "getJSON",
          "type": "function",
          "doc": "fetch and parse a json file's contents",
          "tags": [
            {
              "kind": "param",
              "name": "path",
              "type": "string",
              "doc": "- a url or within-the-enhancer filepath"
            },
            {
              "kind": "param",
              "name": "opts",
              "type": "FetchOptions",
              "doc": "- the second argument of a fetch() request",
              "optional": true
            },
            {
              "kind": "return",
              "type": "unknown",
              "doc": "the json value of the requested file as a js object"
            }
          ]
        },
        {
          "name": "getText",
          "type": "function",
          "doc": "fetch a text file's contents",
          "tags": [
            {
              "kind": "param",
              "name": "path",
              "type": "string",
              "doc": "- a url or within-the-enhancer filepath"
            },
            {
              "kind": "param",
              "name": "opts",
              "type": "FetchOptions",
              "doc": "- the second argument of a fetch() request",
              "optional": true
            },
            {
              "kind": "return",
              "type": "string",
              "doc": "the text content of the requested file"
            }
          ]
        },
        {
          "name": "isFile",
          "type": "function",
          "doc": "check if a file exists",
          "tags": [
            {
              "kind": "param",
              "name": "path",
              "type": "string",
              "doc": "- a url or within-the-enhancer filepath"
            },
            {
              "kind": "return",
              "type": "boolean",
              "doc": "whether or not the file exists"
            }
          ]
        }
      ]
    },
    {
      "namespace": "notion",
      "description": "a basic wrapper around notion's content apis",
      "exports": [
        {
          "name": "get",
          "type": "function",
          "doc": "unofficial content api: get a block by id\n(requires user to be signed in or content to be public).\nwhy not use the official api?\n1. cors blocking prevents use on the client\n2. the majority of blocks are still 'unsupported'",
          "tags": [
            {
              "kind": "param",
              "name": "id",
              "type": "string",
              "doc": "- uuidv4 record id"
            },
            {
              "kind": "param",
              "name": "table",
              "type": "string",
              "doc": "- record type (default: 'block').\nmay also be 'collection', 'collection_view', 'space', 'notion_user', 'discussion', or 'comment'",
              "optional": true
            },
            {
              "kind": "return",
              "type": "Promise<object>",
              "doc": "record data. type definitions can be found here:\nhttps://github.com/NotionX/react-notion-x/tree/master/packages/notion-types/src"
            }
          ]
        },
        {
          "name": "getUserID",
          "type": "function",
          "doc": "get the id of the current user (requires user to be signed in)",
          "tags": [
            {
              "kind": "return",
              "type": "string",
              "doc": "uuidv4 user id"
            }
          ]
        },
        {
          "name": "getPageID",
          "type": "function",
          "doc": "get the id of the currently open page",
          "tags": [
            {
              "kind": "return",
              "type": "string",
              "doc": "uuidv4 page id"
            }
          ]
        },
        {
          "name": "getSpaceID",
          "type": "function",
          "doc": "get the id of the currently open workspace (requires user to be signed in)",
          "tags": [
            {
              "kind": "return",
              "type": "string",
              "doc": "uuidv4 space id"
            }
          ]
        },
        {
          "name": "search",
          "type": "function",
          "doc": "unofficial content api: search all blocks in a space\n(requires user to be signed in or content to be public).\nwhy not use the official api?\n1. cors blocking prevents use on the client\n2. the majority of blocks are still 'unsupported'",
          "tags": [
            {
              "kind": "param",
              "name": "query",
              "type": "string",
              "doc": "- query to search blocks in the space for",
              "optional": true
            },
            {
              "kind": "param",
              "name": "limit",
              "type": "number",
              "doc": "- the max number of results to return (default: 20)",
              "optional": true
            },
            {
              "kind": "param",
              "name": "spaceID",
              "type": "string",
              "doc": "- uuidv4 workspace id",
              "optional": true
            },
            {
              "kind": "return",
              "type": "object",
              "doc": "the number of total results, the list of matches, and related record values.\ntype definitions can be found here: https://github.com/NotionX/react-notion-x/blob/master/packages/notion-types/src/api.ts"
            }
          ]
        },
        {
          "name": "set",
          "type": "function",
          "doc": "unofficial content api: update a property/the content of an existing record\n(requires user to be signed in or content to be public).\nTEST THIS THOROUGHLY. misuse can corrupt a record, leading the notion client\nto be unable to parse and render content properly and throw errors.\nwhy not use the official api?\n1. cors blocking prevents use on the client\n2. the majority of blocks are still 'unsupported'",
          "tags": [
            {
              "kind": "param",
              "name": "pointer",
              "type": "object",
              "doc": "- the record being updated"
            },
            {
              "kind": "param",
              "name": "recordValue",
              "type": "object",
              "doc": "- the new raw data values to set to the record.\nfor examples, use notion.get to fetch an existing block record.\nto use this to update content, set pointer.path to ['properties', 'title]\nand recordValue to an array of rich text segments. a segment is an array\nwhere the first value is the displayed text and the second value\nis an array of decorations. a decoration is an array where the first value\nis a modifier and the second value specifies it. e.g.\n[\n['bold text', [['b']]],\n[' '],\n['an italicised link', [['i'], ['a', 'https://github.com']]],\n[' '],\n['highlighted text', [['h', 'pink_background']]],\n]\nmore examples can be creating a block with the desired content/formatting,\nthen find the value of blockRecord.properties.title using notion.get.\ntype definitions can be found here: https://github.com/NotionX/react-notion-x/blob/master/packages/notion-types/src/core.ts"
            },
            {
              "kind": "param",
              "name": "pointer.recordID",
              "type": "string",
              "doc": "- uuidv4 record id"
            },
            {
              "kind": "param",
              "name": "pointer.recordTable",
              "type": "string",
              "doc": "- record type (default: 'block').\nmay also be 'collection', 'collection_view', 'space', 'notion_user', 'discussion', or 'comment'",
              "optional": true
            },
            {
              "kind": "param",
              "name": "pointer.property",
              "type": "string",
              "doc": "- the record property to update.\nfor record content, it will be the default: 'title'.\nfor page properties, it will be the property id (the key used in pageRecord.properties).\nother possible values are unknown/untested",
              "optional": true
            },
            {
              "kind": "param",
              "name": "pointer.spaceID",
              "type": "string",
              "doc": "- uuidv4 workspace id",
              "optional": true
            },
            {
              "kind": "param",
              "name": "pointer.path",
              "type": "string",
              "doc": "- the path to the key to be set within the record\n(default: [], the root of the record's values)",
              "optional": true
            },
            {
              "kind": "return",
              "type": "boolean|object",
              "doc": "true if success, else an error object"
            }
          ]
        },
        {
          "name": "create",
          "type": "function",
          "doc": "unofficial content api: create and add a new block to a page\n(requires user to be signed in or content to be public).\nTEST THIS THOROUGHLY. misuse can corrupt a record, leading the notion client\nto be unable to parse and render content properly and throw errors.\nwhy not use the official api?\n1. cors blocking prevents use on the client\n2. the majority of blocks are still 'unsupported'",
          "tags": [
            {
              "kind": "param",
              "name": "insert",
              "type": "object",
              "doc": "- the new record."
            },
            {
              "kind": "param",
              "name": "pointer",
              "type": "object",
              "doc": "- where to insert the new block\nfor examples, use notion.get to fetch an existing block record.\ntype definitions can be found here: https://github.com/NotionX/react-notion-x/blob/master/packages/notion-types/src/block.ts\nmay also be 'collection', 'collection_view', 'space', 'notion_user', 'discussion', or 'comment'"
            },
            {
              "kind": "param",
              "name": "insert.recordValue",
              "type": "object",
              "doc": "- the new raw data values to set to the record.",
              "optional": true
            },
            {
              "kind": "param",
              "name": "insert.recordTable",
              "type": "object",
              "doc": "- record type (default: 'block').\nmay also be 'collection', 'collection_view', 'space', 'notion_user', 'discussion', or 'comment'",
              "optional": true
            },
            {
              "kind": "param",
              "name": "pointer.prepend",
              "type": "string",
              "doc": "- insert before pointer.siblingID. if false, will be appended after",
              "optional": true
            },
            {
              "kind": "param",
              "name": "pointer.siblingID",
              "type": "string",
              "doc": "- uuidv4 sibling id. if unset, the record will be\ninserted at the end of the page start (or the start if pointer.prepend is true)",
              "optional": true
            },
            {
              "kind": "param",
              "name": "pointer.parentID",
              "type": "string",
              "doc": "- uuidv4 parent id",
              "optional": true
            },
            {
              "kind": "param",
              "name": "pointer.parentTable",
              "type": "string",
              "doc": "- parent record type (default: 'block').",
              "optional": true
            },
            {
              "kind": "param",
              "name": "pointer.spaceID",
              "type": "string",
              "doc": "- uuidv4 space id",
              "optional": true
            },
            {
              "kind": "param",
              "name": "pointer.userID",
              "type": "string",
              "doc": "- uuidv4 user id\ninstead of the end",
              "optional": true
            },
            {
              "kind": "return",
              "type": "string|object",
              "doc": "error object or uuidv4 of the new record"
            }
          ]
        },
        {
          "name": "upload",
          "type": "function",
          "doc": "unofficial content api: upload a file to notion's aws servers\n(requires user to be signed in or content to be public).\nTEST THIS THOROUGHLY. misuse can corrupt a record, leading the notion client\nto be unable to parse and render content properly and throw errors.\nwhy not use the official api?\n1. cors blocking prevents use on the client\n2. the majority of blocks are still 'unsupported'",
          "tags": [
            {
              "kind": "param",
              "name": "file",
              "type": "File",
              "doc": "- the file to upload"
            },
            {
              "kind": "param",
              "name": "pointer",
              "type": "object",
              "doc": "- where the file should be accessible from",
              "optional": true
            },
            {
              "kind": "param",
              "name": "pointer.pageID",
              "type": "string",
              "doc": "- uuidv4 page id",
              "optional": true
            },
            {
              "kind": "param",
              "name": "pointer.spaceID",
              "type": "string",
              "doc": "- uuidv4 space id",
              "optional": true
            },
            {
              "kind": "return",
              "type": "string|object",
              "doc": "error object or the url of the uploaded file"
            }
          ]
        },
        {
          "name": "sign",
          "type": "function",
          "doc": "redirect through notion to a resource's signed aws url for display outside of notion\n(requires user to be signed in or content to be public)",
          "tags": [
            {
              "kind": "param",
              "name": "src",
              "doc": "source url for file"
            },
            {
              "kind": "param",
              "name": "recordID",
              "type": "string",
              "doc": "uuidv4 record/block/file id"
            },
            {
              "kind": "param",
              "name": "recordTable",
              "type": "string",
              "doc": "record type (default: 'block').\nmay also be 'collection', 'collection_view', 'space', 'notion_user', 'discussion', or 'comment'",
              "optional": true
            },
            {
              "kind": "return",
              "type": "string",
              "doc": "url signed if necessary, else string as-is"
            }
          ]
        }
      ]
    },
    {
      "namespace": "registry",
      "description": "interactions with the enhancer's repository of mods",
      "exports": [
        {
          "name": "core",
          "type": "string[]",
          "doc": "mod ids whitelisted as part of the enhancer's core, permanently enabled",
          "tags": [
            {
              "kind": "constant",
              "doc": ""
            }
          ]
        },
        {
          "name": "supportedEnvs",
          "type": "string[]",
          "doc": "all environments/platforms currently supported by the enhancer",
          "tags": [
            {
              "kind": "constant",
              "doc": ""
            }
          ]
        },
        {
          "name": "optionTypes",
          "type": "string[]",
          "doc": "all available configuration types",
          "tags": [
            {
              "kind": "constant",
              "doc": ""
            }
          ]
        },
        {
          "name": "profileName",
          "type": "function",
          "doc": "the name of the active configuration profile",
          "tags": [
            {
              "kind": "return",
              "type": "string"
            }
          ]
        },
        {
          "name": "profileDB",
          "type": "function",
          "doc": "the root database for the current profile",
          "tags": [
            {
              "kind": "return",
              "type": "object",
              "doc": "the get/set functions for the profile's storage"
            }
          ]
        },
        {
          "name": "list",
          "type": "function",
          "doc": "list all available mods in the repo",
          "tags": [
            {
              "kind": "param",
              "name": "filter",
              "type": "function",
              "doc": "- a function to filter out mods"
            },
            {
              "kind": "return",
              "type": "array",
              "doc": "a validated list of mod.json objects"
            }
          ]
        },
        {
          "name": "errors",
          "type": "function",
          "doc": "list validation errors encountered when loading the repo",
          "tags": [
            {
              "kind": "return",
              "type": "{ source: string, message: string "
            }
          ]
        },
        {
          "name": "get",
          "type": "function",
          "doc": "get a single mod from the repo",
          "tags": [
            {
              "kind": "param",
              "name": "id",
              "type": "string",
              "doc": "- the uuid of the mod"
            },
            {
              "kind": "return",
              "type": "object",
              "doc": "the mod's mod.json"
            }
          ]
        },
        {
          "name": "enabled",
          "type": "function",
          "doc": "checks if a mod is enabled: affected by the core whitelist,\nenvironment and menu configuration",
          "tags": [
            {
              "kind": "param",
              "name": "id",
              "type": "string",
              "doc": "- the uuid of the mod"
            },
            {
              "kind": "return",
              "type": "boolean",
              "doc": "whether or not the mod is enabled"
            }
          ]
        },
        {
          "name": "optionDefault",
          "type": "function",
          "doc": "get a default value of a mod's option according to its mod.json",
          "tags": [
            {
              "kind": "param",
              "name": "id",
              "type": "string",
              "doc": "- the uuid of the mod"
            },
            {
              "kind": "param",
              "name": "key",
              "type": "string",
              "doc": "- the key of the option"
            },
            {
              "kind": "return",
              "type": "string|number|boolean|undefined",
              "doc": "the option's default value"
            }
          ]
        },
        {
          "name": "db",
          "type": "function",
          "doc": "access the storage partition of a mod in the current profile",
          "tags": [
            {
              "kind": "param",
              "name": "id",
              "type": "string",
              "doc": "- the uuid of the mod"
            },
            {
              "kind": "return",
              "type": "object",
              "doc": "an object with the wrapped get/set functions"
            }
          ]
        }
      ]
    },
    {
      "namespace": "storage",
      "description": "environment-specific data persistence",
      "exports": [
        {
          "name": "get",
          "type": "function",
          "doc": "get persisted data",
          "tags": [
            {
              "kind": "param",
              "name": "path",
              "type": "string[]",
              "doc": "- the path of keys to the value being fetched"
            },
            {
              "kind": "param",
              "name": "fallback",
              "type": "unknown",
              "doc": "- a default value if the path is not matched",
              "optional": true
            },
            {
              "kind": "return",
              "type": "Promise",
              "doc": "value ?? fallback"
            }
          ]
        },
        {
          "name": "set",
          "type": "function",
          "doc": "persist data",
          "tags": [
            {
              "kind": "param",
              "name": "path",
              "type": "string[]",
              "doc": "- the path of keys to the value being set"
            },
            {
              "kind": "param",
              "name": "value",
              "type": "unknown",
              "doc": "- the data to save"
            },
            {
              "kind": "return",
              "type": "Promise",
              "doc": "resolves when data has been saved"
            }
          ]
        },
        {
          "name": "db",
          "type": "function",
          "doc": "create a wrapper for accessing a partition of the storage",
          "tags": [
            {
              "kind": "param",
              "name": "namespace",
              "type": "string[]",
              "doc": "- the path of keys to prefix all storage requests with"
            },
            {
              "kind": "param",
              "name": "get",
              "type": "function",
              "doc": "- the storage get function to be wrapped",
              "optional": true
            },
            {
              "kind": "param",
              "name": "set",
              "type": "function",
              "doc": "- the storage set function to be wrapped",
              "optional": true
            },
            {
              "kind": "return",
              "type": "object",
              "doc": "an object with the wrapped get/set functions"
            }
          ]
        },
        {
          "name": "addChangeListener",
          "type": "function",
          "doc": "add an event listener for changes in storage",
          "tags": [
            {
              "kind": "param",
              "name": "callback",
              "type": "onStorageChangeCallback",
              "doc": "- called whenever a change in\nstorage is initiated from the current process"
            }
          ]
        },
        {
          "name": "removeChangeListener",
          "type": "function",
          "doc": "remove a listener added with storage.addChangeListener",
          "tags": [
            {
              "kind": "param",
              "name": "callback",
              "type": "onStorageChangeCallback"
            }
          ]
        }
      ]
    },
    {
      "namespace": "web",
      "description": "helpers for manipulation of a webpage",
      "exports": [
        {
          "name": "whenReady",
          "type": "function",
          "doc": "wait until a page is loaded and ready for modification",
          "tags": [
            {
              "kind": "param",
              "name": "selectors",
              "type": "array",
              "doc": "- wait for the existence of elements that match these css selectors",
              "optional": true
            },
            {
              "kind": "return",
              "type": "Promise",
              "doc": "a promise that will resolve when the page is ready"
            }
          ]
        },
        {
          "name": "queryParams",
          "type": "function",
          "doc": "parse the current location search params into a usable form",
          "tags": [
            {
              "kind": "return",
              "type": "Map<string, string>",
              "doc": "a map of the url search params"
            }
          ]
        },
        {
          "name": "escape",
          "type": "function",
          "doc": "replace special html characters with escaped versions",
          "tags": [
            {
              "kind": "param",
              "name": "str",
              "type": "string"
            },
            {
              "kind": "return",
              "type": "string",
              "doc": "escaped string"
            }
          ]
        },
        {
          "name": "raw",
          "type": "function",
          "doc": "a tagged template processor for raw html:\nstringifies, minifies, and syntax highlights",
          "tags": [
            {
              "kind": "example",
              "doc": "web.raw`<p>hello</p>`"
            },
            {
              "kind": "return",
              "type": "string",
              "doc": "the processed html"
            }
          ]
        },
        {
          "name": "html",
          "type": "function",
          "doc": "create a single html element inc. attributes and children from a string",
          "tags": [
            {
              "kind": "example",
              "doc": "web.html`<p>hello</p>`"
            },
            {
              "kind": "return",
              "type": "Element",
              "doc": "the constructed html element"
            }
          ]
        },
        {
          "name": "render",
          "type": "function",
          "doc": "appends a list of html elements to a parent",
          "tags": [
            {
              "kind": "param",
              "name": "$container",
              "doc": "- the parent element"
            },
            {
              "kind": "param",
              "name": "$elems",
              "doc": "- the elements to be appended"
            },
            {
              "kind": "return",
              "type": "Element",
              "doc": "the updated $container"
            }
          ]
        },
        {
          "name": "empty",
          "type": "function",
          "doc": "removes all children from an element without deleting them/their behaviours",
          "tags": [
            {
              "kind": "param",
              "name": "$container",
              "doc": "- the parent element"
            },
            {
              "kind": "return",
              "type": "Element",
              "doc": "the updated $container"
            }
          ]
        },
        {
          "name": "loadStylesheet",
          "type": "function",
          "doc": "loads/applies a css stylesheet to the page",
          "tags": [
            {
              "kind": "param",
              "name": "path",
              "type": "string",
              "doc": "- a url or within-the-enhancer filepath"
            }
          ]
        },
        {
          "name": "copyToClipboard",
          "type": "function",
          "doc": "copy text to the clipboard",
          "tags": [
            {
              "kind": "param",
              "name": "str",
              "type": "string",
              "doc": "- the string to copy"
            },
            {
              "kind": "return",
              "type": "Promise<void>"
            }
          ]
        },
        {
          "name": "readFromClipboard",
          "type": "function",
          "doc": "read text from the clipboard",
          "tags": [
            {
              "kind": "return",
              "type": "Promise<string>"
            }
          ]
        },
        {
          "name": "addHotkeyListener",
          "type": "function",
          "doc": "register a hotkey listener to the page",
          "tags": [
            {
              "kind": "param",
              "name": "keys",
              "type": "array|string",
              "doc": "- the combination of keys that will trigger the hotkey.\nkey codes can be tested at http://keycode.info/ and are case-insensitive.\navailable modifiers are 'alt', 'ctrl', 'meta', and 'shift'.\ncan be provided as a + separated string."
            },
            {
              "kind": "param",
              "name": "callback",
              "type": "function",
              "doc": "- called whenever the keys are pressed"
            },
            {
              "kind": "param",
              "name": "opts",
              "type": "object",
              "doc": "- fine-tuned control over when the hotkey should be triggered",
              "optional": true
            },
            {
              "kind": "param",
              "name": "opts.listenInInput",
              "type": "boolean",
              "doc": "- whether the hotkey callback should be triggered\nwhen an input is focused",
              "optional": true
            },
            {
              "kind": "param",
              "name": "opts.keydown",
              "type": "boolean",
              "doc": "- whether to listen for the hotkey on keydown.\nby default, hotkeys are triggered by the keyup event.",
              "optional": true
            }
          ]
        },
        {
          "name": "removeHotkeyListener",
          "type": "function",
          "doc": "remove a listener added with web.addHotkeyListener",
          "tags": [
            {
              "kind": "param",
              "name": "callback",
              "type": "function"
            }
          ]
        },
        {
          "name": "addDocumentObserver",
          "type": "function",
          "doc": "add a listener to watch for changes to the dom",
          "tags": [
            {
              "kind": "param",
              "name": "callback",
              "type": "onDocumentObservedCallback"
            },
            {
              "kind": "param",
              "name": "selectors",
              "type": "string[]",
              "optional": true
            }
          ]
        },
        {
          "name": "removeDocumentObserver",
          "type": "function",
          "doc": "remove a listener added with web.addDocumentObserver",
          "tags": [
            {
              "kind": "param",
              "name": "callback",
              "type": "onDocumentObservedCallback"
            }
          ]
        }
      ]
    }
  ]
}